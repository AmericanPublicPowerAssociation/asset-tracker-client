import React, { PureComponent, Fragment } from 'react'
import { find_path as findPath } from 'dijkstrajs'
import Typography from '@material-ui/core/Typography'
import Table from '@material-ui/core/Table'
import TableHead from '@material-ui/core/TableHead'
import TableBody from '@material-ui/core/TableBody'
import TableRow from '@material-ui/core/TableRow'
import TableCell from '@material-ui/core/TableCell'
import {
  ASSET_TYPE_BY_ID,
} from '../constants'

class VulnerabilityReportWindow extends PureComponent {
  render() {
    const {
      vulnerableAssets,
      connectionGraph,
      rootAssetIds,
      meterAssetIds,
      switchAssetIds,
    } = this.props

    const getMeterCount = assetId => {
      const rootPaths = rootAssetIds
        .map(id => findPath(connectionGraph, id, assetId))
      const rootIds = rootPaths.flat().filter(id => id !== assetId)
      const meterPaths = meterAssetIds
        .map(id => findPath(connectionGraph, id, assetId))
      return meterPaths.filter(ids => {
        for (const id of ids) {
          if (rootIds.includes(id)) return false
        }
        return true
      }).length
    }

    return (
      <Fragment>
        <Typography variant='h6' align='center'>Vulnerability Report</Typography>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Asset Name</TableCell>
              <TableCell>Meter Count</TableCell>
              <TableCell>Impact Score</TableCell>
              <TableCell>Vulnerability</TableCell>
              <TableCell>Date Published</TableCell>
              <TableCell align='right'>Asset Type</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
          {
            vulnerableAssets.map(asset => {
              const assetId = asset.get('id')
              const assetName = asset.get('name')
              let meterCount = getMeterCount(assetId)
              if (!meterCount) {
                let bestSwitchAssetId
                let bestSwitchPathLength = Infinity
                for (const id of switchAssetIds) {
                  let switchPathLength = findPath(connectionGraph, id, assetId).length
                  if (switchPathLength < bestSwitchPathLength) {
                    bestSwitchAssetId = id
                    bestSwitchPathLength = switchPathLength
                  }
                }
                meterCount = getMeterCount(bestSwitchAssetId)
              }
              const impactScore = meterCount * 10
              const vulnerabilityDescription = 'An Improper Access Control issue was discovered in Schweitzer Engineering Laboratories (SEL) SEL-3620 and SEL-3622 Security Gateway Versions R202 and, R203, R203-V1, R203-V2 and, R204, R204-V1. The device does not properly enforce access control while configured for NAT port forwarding, which may allow for unauthorized communications to downstream devices.'
              const datePublished = '20170807'
              const assetTypeId = asset.get('typeId')
              return (
                <TableRow key={assetId}>
                  <TableCell component='th' scope='row'>{assetName}</TableCell>
                  <TableCell>{meterCount}</TableCell>
                  <TableCell>{impactScore}</TableCell>
                  <TableCell>{vulnerabilityDescription}</TableCell>
                  <TableCell><a target='_blank' rel='noopener noreferrer' href='https://nvd.nist.gov/vuln/detail/CVE-2017-7928'>{datePublished}</a></TableCell>
                  <TableCell align='right'>{ASSET_TYPE_BY_ID[assetTypeId].name}</TableCell>
                </TableRow>
              )
            })
          }
          </TableBody>
        </Table>
      </Fragment>
    )
  }
}

export default VulnerabilityReportWindow
