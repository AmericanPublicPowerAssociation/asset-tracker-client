import { find_path as findPath } from 'dijkstrajs'


const getMeterCount = assetId => {
  const rootPaths = rootAssetIds
    .map(id => findPath(connectionGraph, id, assetId))
  const rootIds = rootPaths.flat().filter(id => id !== assetId)
  const meterPaths = meterAssetIds
    .map(id => findPath(connectionGraph, id, assetId))
  return meterPaths.filter(ids => {
    for (const id of ids) {
      if (rootIds.includes(id)) return false
    }
    return true
  }).length
}

<Typography variant='h6' align='center'>Vulnerability Report</Typography>

{
  vulnerableAssets.map(asset => {
    if (!meterCount) {
      let bestSwitchAssetId
      let bestSwitchPathLength = Infinity
      for (const id of switchAssetIds) {
        let switchPathLength = findPath(connectionGraph, id, assetId).length
        if (switchPathLength < bestSwitchPathLength) {
          bestSwitchAssetId = id
          bestSwitchPathLength = switchPathLength
        }
      }
      meterCount = getMeterCount(bestSwitchAssetId)
    }
  })
}
